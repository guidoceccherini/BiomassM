#
# # # # 4) Reproject only the cropped portion to Italy CRS
# # # Biomass2010_final <- project(Biomass2010_cropped, disturbance_binary)
#
# # # # Check result
# # # print(Biomass2010_final)
# # # plot(Biomass2010_final)
#
# # # write Biomass2010_final raster and ignore in git
# writeRaster(Biomass2010_cropped,'Data/BiomassItaly2010.tif',overwrite=TRUE)
Biomass2010_cropped <- rast('Data/BiomassItaly2010.tif')
# same with biomass 2020
# Biomass2020 <- rast('Data/ESACCI-BIOMASS-L4-AGB-MERGED-100m-2020-fv6.0.nc')
# BiomassChange <- rast('Data/ESACCI-BIOMASS-L4-AGB-CHANGE-100m-2020-2010-fv6.0.nc')
# Crop Biomass2020 using the transformed extent (fast!)
# Biomass2020_cropped <- crop(Biomass2020, italy_extent_transformed)
# write Biomass2010_final raster and ignore in git
# writeRaster(Biomass2020_cropped,'Data/BiomassItaly2020.tif')
Biomass2020_cropped <- rast('Data/BiomassItaly2020.tif')
# load EEA dataset
# EEA_forest_type <- rast('Data/FTY_2015_100m_eu_03035_d02_Full/FTY_2015_100m_eu_03035_d02_full.tif')
# EEA_forest_type_cropped <- crop(EEA_forest_type, italy_extent)
# writeRaster(EEA_forest_type_cropped,'Data/EEA_forest_type_cropped.tif')
EEA_forest_type_cropped <- rast('Data/EEA_forest_type_cropped.tif')
# General histograms for the entire study area
library(terra)
library(sf)
library(ggplot2)
library(dplyr)
# Check your rasters
print(Biomass2010_cropped)
print(disturbance_binary)
print(EEA_forest_type_cropped)
# Step 1: Reproject all rasters to a common CRS and resolution
# Option A: Reproject everything to match disturbance_binary (EPSG:3035)
# This is recommended as it's the native CRS for European data
# Biomass2010_reprojected <- project(Biomass2010_cropped[[1]],
#                                    disturbance_binary,
#                                    method = "bilinear")
#
# # If EEA_forest_type is also in different CRS, reproject it
# EEA_forest_type_reprojected <- project(EEA_forest_type_cropped,
#                                        disturbance_binary,
#                                        method = "near")  # Use "near" for categorical data
#
# # Step 2: Resample to match exact grid alignment
# # This ensures pixels align perfectly
# Biomass2010_aligned <- resample(Biomass2010_reprojected,
#                                 disturbance_binary,
#                                 method = "bilinear")
#
# EEA_forest_type_aligned <- resample(EEA_forest_type_reprojected,
#                                     disturbance_binary,
#                                     method = "near")
#
# # Verify they now match
# compareGeom(disturbance_binary, Biomass2010_aligned, EEA_forest_type_aligned)
#
# writeRaster(Biomass2010_aligned,'Data/Biomass2010_aligned.tif')
# writeRaster(EEA_forest_type_aligned,'Data/EEA_forest_type_aligned.tif')
Biomass2010_aligned <- rast('Data/Biomass2010_aligned.tif')
EEA_forest_type_aligned <- rast('Data/EEA_forest_type_aligned.tif')
# Step 3: Now mask biomass by disturbance
biomass_undisturbed <- mask(Biomass2010_aligned,
undisturbed,
maskvalues = c(0, NA))
# Step 4: Stack and extract values
biomass_forest_stack <- c(biomass_undisturbed[[1]], EEA_forest_type_aligned)
names(biomass_forest_stack) <- c("biomass", "forest_type")
# Get Italy extent from raster
italy_extent <- ext(Biomass2010_aligned)
# Convert extent to polygon for clipping
italy_bbox <- as.polygons(italy_extent, crs = crs(Biomass2010_aligned))
italy_bbox_sf <- st_as_sf(italy_bbox)
# Ensure CRS match
if(st_crs(Hex) != st_crs(italy_bbox_sf)) {
cat("Reprojecting hexagons to match raster CRS...\n")
Hex <- st_transform(Hex, st_crs(italy_bbox_sf))
}
# Clip hexagons to Italy extent
cat("Clipping hexagons to Italy extent...\n")
cat("Original number of hexagons:", nrow(Hex), "\n")
Hex_italy <- st_intersection(Hex, italy_bbox_sf)
Hex_italy <- Hex_italy |> dplyr::filter(forest_count >0)
# Make sure hexagons have an ID
if(!"hex_ID" %in% names(Hex_italy)) {
Hex_italy$hex_ID <- 1:nrow(Hex_italy)
}
Hex_italy
plot(Hex_italy)
st_write(Hex_italy |> select(-hex_id),'Data/Hexs/Hex_italy.gpkg')
Hex_italy <- st_read('Data/Hexs/Hex_italy.gpkg')
plot(Hex_italy)
# join hex_summary_ratio with Hex_italy
Hex_italy_biomass_ratio <- Hex_italy %>%
left_join(hex_summary_ratio, by = c("ID" = "hex_ID"))
Hex_italy
hex_summary_ratio
# join hex_summary_ratio with Hex_italy
Hex_italy_biomass_ratio <- Hex_italy %>%st_drop_geometry() %>%
left_join(hex_summary_ratio, by = c("ID" = "hex_ID"))
Hex_italy %>%st_drop_geometry()
# join hex_summary_ratio with Hex_italy
Hex_italy_biomass_ratio <- Hex_italy %>%st_drop_geometry() %>%
left_join(hex_summary_ratio, by = c("hex_ID"))
# join hex_summary_ratio with Hex_italy
Hex_italy_biomass_ratio <- Hex_italy %>% ###st_drop_geometry() %>%
left_join(hex_summary_ratio, by = c("hex_ID"))
Hex_italy_biomass_ratio
plot(Hex_italy_biomass_ratio)
hex_summary_ratio
# make hex_summary_ratio wider to get forest type in wide format
hex_summary_ratio_wide <- hex_summary_ratio %>%
select(hex_ID, forest_type_label, biomass_ratio_DIST_UND) %>%
pivot_wider(names_from = forest_type_label, values_from = biomass_ratio_DIST_UND, names_prefix = "ratio_")
hex_summary_ratio_wide
hex_summary_ratio
# make hex_summary wide to get unsisturbed and disturbed exploded for forest type
hex_summary_wide <- hex_summary %>%
select(hex_ID, forest_type_label, mean_biomass, disturbance_status, n_pixels) %>%
pivot_wider(names_from = disturbance_status, values_from = c(mean_biomass, n_pixels), names_sep = "_")
hex_summary_wide
hex_summary
hex_summary_ratio
hex_summary_wide
hex_summary_ratio
# make hex_summary_ratio wider to get forest type in wide format
hex_summary_ratio_wide <- hex_summary_ratio %>%
select(hex_ID, forest_type_label, biomass_ratio_DIST_UND) %>%
pivot_wider(names_from = forest_type_label, values_from = biomass_ratio_DIST_UND, names_prefix = "ratio_")
hex_summary_ratio_wide
hex_summary_ratio
# make hex_summary_ratio wider to get forest type in wide format
hex_summary_Undisturbed_wide <- hex_summary_ratio %>%
select(hex_ID, forest_type_label, Undisturbed) %>%
pivot_wider(names_from = forest_type_label, values_from = Undisturbed, names_prefix = "UND_")
hex_summary_Undisturbed_wide
hex_summary_ratio <- hex_summary %>%
filter(n_pixels >= 30) %>%
select(hex_ID, forest_type_label, mean_biomass, disturbance_status) %>%
pivot_wider(names_from = disturbance_status, values_from = mean_biomass) %>%
mutate(biomass_ratio_DIST_UND = Disturbed / Undisturbed)
# make hex_summary_ratio wider to get forest type in wide format
hex_summary_ratio_wide <- hex_summary_ratio %>%
select(hex_ID, forest_type_label, biomass_ratio_DIST_UND) %>%
pivot_wider(names_from = forest_type_label, values_from = biomass_ratio_DIST_UND, names_prefix = "ratio_")
# make hex_summary_ratio wider to get forest type in wide format
hex_summary_Undisturbed_wide <- hex_summary_ratio %>%
select(hex_ID, forest_type_label, Undisturbed) %>%
pivot_wider(names_from = forest_type_label, values_from = Undisturbed, names_prefix = "UND_")
hex_summary_Disturbed_wide <- hex_summary_ratio %>%
select(hex_ID, forest_type_label, Disturbed) %>%
pivot_wider(names_from = forest_type_label, values_from = Disturbed, names_prefix = "DIST_")
Hex_italy <- st_read('Data/Hexs/Hex_italy.gpkg')
# join hex_summary_ratio with Hex_italy
Hex_italy_biomass_ratio <- Hex_italy %>% ###st_drop_geometry() %>%
left_join(hex_summary_ratio_wide, by = c("hex_ID")) #%>%
Hex_italy_biomass_ratio
View(Hex_italy_biomass_ratio)
hex_summary_Undisturbed_wide
# join hex_summary_ratio with Hex_italy
Hex_italy_biomass_ratio <- Hex_italy %>% ###st_drop_geometry() %>%
left_join(hex_summary_ratio_wide, by = c("hex_ID")) %>%
left_join(hex_summary_Undisturbed_wide, by = c("hex_ID"))%>%
left_join(hex_summary_Disturbed_wide, by = c("hex_ID"))
Hex_italy_biomass_ratio
# write Hex_italy_biomass_ratio to gpkg
st_write(Hex_italy_biomass_ratio, "Data/Hexs/Hex_italy_biomass_ratioUndisturbed.gpkg", delete_dsn = TRUE)
# # Extract layers for 2015-2020 (layers 31-36)
disturbances_2015_2020 <- Disturbances[[31:36]]
Disturbances <- rast('Data/czechia/annual_disturbances_1985_2023_czechia.tif')
library(sf)
library(raster)
library(tidyverse)
library(tmap)
library(ggplot2)
library("stringr")
library(scales)
library(ggspatial)
library(colorblindcheck)
library(rcartocolor)
library(cols4all)
library(ggpubfigs)
library(tidyverse)
library(jsonlite)
library(terra)
# usare Biogeoregioni
# usare atlas of disturbances di Senf: https://zenodo.org/records/13333034
# Usa Esagoni di Daniele
# usa forest type mask da EEA
# usa biomassa di esa cci per 2010 e 2020 e il loro relativo cambio: https://catalogue.ceda.ac.uk/uuid/95913ffb6467447ca72c4e9d8cf30501/  o ftp: ftp://anon-ftp.ceda.ac.uk/neodc/esacci/biomass/data/agb/maps/v6.0
# Prendi i pixel per cui hai loss dal 2015 al 2020 (salta 2010-15 per evitare problemi di ricresicita) e fai delle distribuzioni di frequenza di agb loss per nnedleleaf e broadleaf per aree geografiche
# open Biogeoregions
BG <- st_read('Data/BiogeoRegions2016.shp')
# open hexagons
Hex <- st_read('Data/grid_forest.gpkg')
Disturbances <- rast('Data/czechia/annual_disturbances_1985_2023_czechia.tif')
# # Identify which layers correspond to 2015-2020
# # Assuming layer 1 = 1985, layer 2 = 1986, etc.
# # 2015 would be layer 31 (1985 + 30 = 2015)
# # 2020 would be layer 36 (1985 + 35 = 2020)
# # Extract layers for 2015-2020 (layers 31-36)
disturbances_2015_2020 <- Disturbances[[31:36]]
disturbances_2011_2023 <- Disturbances[[27:39]]
# # Check layer names to confirm
# names(disturbances_2015_2020)
# # Create binary raster: 1 if ANY disturbance in 2015-2020, 0 otherwise
# # # Method 1: Using max() - if any layer has a value > 0
disturbance_binary <- max(disturbances_2015_2020, na.rm = TRUE)
disturbance_binary11_23 <- max(disturbances_2011_2023, na.rm = TRUE)
BG <- st_read('Data/BiogeoRegions2016.shp')
Hex <- st_read('Data/grid_forest.gpkg')
Disturbances <- rast('Data/czechia/annual_disturbances_1985_2023_czechia.tif')
# # Extract layers for 2015-2020 (layers 31-36)
disturbances_2015_2020 <- Disturbances[[31:36]]
disturbances_2011_2023 <- Disturbances[[27:39]]
# # Create binary raster: 1 if ANY disturbance in 2015-2020, 0 otherwise
# # # Method 1: Using max() - if any layer has a value > 0
disturbance_binary <- max(disturbances_2015_2020, na.rm = TRUE)
disturbance_binary11_23 <- max(disturbances_2011_2023, na.rm = TRUE)
disturbance_binaryAll <- max(Disturbances, na.rm = TRUE)
# # Convert to binary (1 if disturbed, 0 if not)
disturbance_binary <- ifel(disturbance_binary > 0, 1, 0)
disturbance_binary11_23 <- ifel(disturbance_binary11_23 > 0, 1, 0)
# # Check result
# disturbance_binary
plot(disturbance_binary, main = "Disturbances 2015-2020 (1 = disturbed)")
plot(disturbance_binary11_23, main = "Disturbances 2011-2023 (1 = disturbed)")
# # Save the output
writeRaster(disturbance_binary,
"Data/czechia/disturbance_binary_2015_2020.tif",
overwrite = TRUE)
writeRaster(disturbance_binary11_23,
"Data/czechia/disturbance_binary_2011_2023.tif",
overwrite = TRUE)
# undisturbed pixels
ForestMask <- rast('Data/czechia/forest_mask_czechia.tif')
undisturbed <- ifel(disturbance_binaryAll > 0, NA, ForestMask)
writeRaster(undisturbed,
"Data/czechia/undisturbed.tif",
overwrite = TRUE)
disturbance_binary <- rast("Data/czechia/disturbance_binary_2011_2023.tif")
undisturbed <- rast("Data/czechia/undisturbed.tif")
Biomass2010 <- rast('Data/ESACCI-BIOMASS-L4-AGB-MERGED-100m-2010-fv6.0.nc')
# clip Biomass2010 to the spatial extent of raster czechia (the extent of disturbance_binary)
# 1) Get czechia extent
czechia_extent <- ext(disturbance_binary)
czechia_crs <- crs(disturbance_binary)
# 2) Reproject the extent to Biomass2019 CRS
czechia_extent_transformed <- project(czechia_extent,
from = czechia_crs,
to = crs(Biomass2010))
#
# # # # 4) Reproject only the cropped portion to czechia CRS
# # # Biomass2010_final <- project(Biomass2010_cropped, disturbance_binary)
#
# # # # Check result
# # # print(Biomass2010_final)
# # # plot(Biomass2010_final)
#
# # # write Biomass2010_final raster and ignore in git
# writeRaster(Biomass2010_cropped,'Data/Biomassczechia2010.tif',overwrite=TRUE)
Biomass2010_cropped <- rast('Data/Biomassczechia2010.tif')
# 3) Crop Biomass2010 using the transformed extent (fast!)
Biomass2010_cropped <- crop(Biomass2010, czechia_extent_transformed)
plot(Biomass2010_cropped)
#
# # # # 4) Reproject only the cropped portion to czechia CRS
# # # Biomass2010_final <- project(Biomass2010_cropped, disturbance_binary)
#
# # # # Check result
# # # print(Biomass2010_final)
# # # plot(Biomass2010_final)
#
# # # write Biomass2010_final raster and ignore in git
writeRaster(Biomass2010_cropped,'Data/Biomassczechia2010.tif',overwrite=TRUE)
Biomass2010_cropped <- rast('Data/Biomassczechia2010.tif')
Biomass2020 <- rast('Data/ESACCI-BIOMASS-L4-AGB-MERGED-100m-2020-fv6.0.nc')
# BiomassChange <- rast('Data/ESACCI-BIOMASS-L4-AGB-CHANGE-100m-2020-2010-fv6.0.nc')
# Crop Biomass2020 using the transformed extent (fast!)
Biomass2020_cropped <- crop(Biomass2020, czechia_extent_transformed)
# write Biomass2010_final raster and ignore in git
writeRaster(Biomass2020_cropped,'Data/Biomassczechia2020.tif')
EEA_forest_type <- rast('Data/FTY_2015_100m_eu_03035_d02_Full/FTY_2015_100m_eu_03035_d02_full.tif')
EEA_forest_type_cropped <- crop(EEA_forest_type, czechia_extent)
writeRaster(EEA_forest_type_cropped,'Data/EEA_forest_type_cropped.tif')
writeRaster(EEA_forest_type_cropped,'Data/EEA_forest_type_croppedczechia.tif')
EEA_forest_type_cropped <- rast('Data/EEA_forest_type_croppedczechia.tif')
# General histograms for the entire study area
library(terra)
library(sf)
library(ggplot2)
library(dplyr)
# Check your rasters
print(Biomass2010_cropped)
print(disturbance_binary)
print(EEA_forest_type_cropped)
#
# EEA_forest_type_aligned <- resample(EEA_forest_type_reprojected,
#                                     disturbance_binary,
#                                     method = "near")
#
# # Verify they now match
# compareGeom(disturbance_binary, Biomass2010_aligned, EEA_forest_type_aligned)
#
# writeRaster(Biomass2010_aligned,'Data/Biomass2010_aligned.tif')
# writeRaster(EEA_forest_type_aligned,'Data/EEA_forest_type_aligned.tif')
Biomass2010_aligned <- rast('Data/Biomass2010_aligned.tif')
Biomass2010_cropped
plot(Biomass2010_cropped)
plot(disturbance_binary)
Biomass2010_reprojected <- project(Biomass2010_cropped[[1]],
disturbance_binary,
method = "bilinear")
# If EEA_forest_type is also in different CRS, reproject it
EEA_forest_type_reprojected <- project(EEA_forest_type_cropped,
disturbance_binary,
method = "near")  # Use "near" for categorical data
# Step 2: Resample to match exact grid alignment
# This ensures pixels align perfectly
Biomass2010_aligned <- resample(Biomass2010_reprojected,
disturbance_binary,
method = "bilinear")
EEA_forest_type_aligned <- resample(EEA_forest_type_reprojected,
disturbance_binary,
method = "near")
# Verify they now match
compareGeom(disturbance_binary, Biomass2010_aligned, EEA_forest_type_aligned)
writeRaster(Biomass2010_aligned,'Data/Biomassczechia2010_aligned.tif')
writeRaster(EEA_forest_type_aligned,'Data/EEA_forest_type_alignedczechia.tif')
Biomass2010_aligned <- rast('Data/Biomassczechia2010_aligned.tif')
EEA_forest_type_aligned <- rast('Data/EEA_forest_type_alignedczechia.tif')
# Step 3: Now mask biomass by disturbance
biomass_undisturbed <- mask(Biomass2010_aligned,
undisturbed,
maskvalues = c(0, NA))
# Step 4: Stack and extract values
biomass_forest_stack <- c(biomass_undisturbed[[1]], EEA_forest_type_aligned)
names(biomass_forest_stack) <- c("biomass", "forest_type")
# Get czechia extent from raster
czechia_extent <- ext(Biomass2010_aligned)
# Convert extent to polygon for clipping
czechia_bbox <- as.polygons(czechia_extent, crs = crs(Biomass2010_aligned))
czechia_bbox_sf <- st_as_sf(czechia_bbox)
# Ensure CRS match
if(st_crs(Hex) != st_crs(czechia_bbox_sf)) {
cat("Reprojecting hexagons to match raster CRS...\n")
Hex <- st_transform(Hex, st_crs(czechia_bbox_sf))
}
# Clip hexagons to czechia extent
cat("Clipping hexagons to czechia extent...\n")
cat("Original number of hexagons:", nrow(Hex), "\n")
Hex_czechia <- st_intersection(Hex, czechia_bbox_sf)
Hex_czechia <- Hex_czechia |> dplyr::filter(forest_count >0)
# Make sure hexagons have an ID
if(!"hex_ID" %in% names(Hex_czechia)) {
Hex_czechia$hex_ID <- 1:nrow(Hex_czechia)
}
st_write(Hex_czechia |> select(-hex_id),'Data/Hexs/Hex_czechia.gpkg')
PLOT(Hex_czechia)
plot(Hex_czechia)
library(data.table)
# ============================================================================
# Function to extract data for a single hexagon
# ============================================================================
extract_hex_data <- function(hex_idx, hex_geom, raster_stack) {
tryCatch({
# Extract raster values within this hexagon
hex_vals <- extract(raster_stack,
hex_geom,
ID = FALSE,
cells = FALSE,
xy = FALSE)
# Convert to data.table
dt <- data.table(hex_vals)
# Filter valid data
dt <- dt[!is.na(biomass) & !is.na(forest_type) &
forest_type %in% c(1, 2, 3) & biomass > 0]
# Add hexagon ID
if(nrow(dt) > 0) {
dt[, hex_ID := hex_idx]
return(dt)
} else {
return(NULL)
}
}, error = function(e) {
warning(sprintf("Error processing hexagon %d: %s", hex_idx, e$message))
return(NULL)
})
}
# ============================================================================
# OPTION 1: Sequential processing (safer, easier to debug)
# ============================================================================
cat("Processing", nrow(Hex_czechia), "hexagons sequentially...\n")
all_results <- vector("list", nrow(Hex_czechia))
for(i in 1:nrow(Hex_czechia)) {
if(i %% 100 == 0) {
cat(sprintf("Processing hexagon %d/%d (%.1f%%)\n",
i, nrow(Hex_czechia), 100*i/nrow(Hex_czechia)))
}
all_results[[i]] <- extract_hex_data(Hex_czechia$hex_ID[i],
Hex_czechia[i, ],
biomass_forest_stack)
}
cat("Combining results...\n")
biomass_hex_dt <- rbindlist(all_results[!sapply(all_results, is.null)])
# Add forest type labels
biomass_hex_dt[, forest_type_label := fcase(
forest_type == 1, "Broadleaf",
forest_type == 2, "Needleleaf",
forest_type == 3, "Mixed Forest",
default = NA_character_
)]
biomass_hex_dt
all_results
Hex_czechia
biomass_forest_stack
plot(biomass_forest_stack)
# ============================================================================
# Function to extract data for a single hexagon
# ============================================================================
extract_hex_data <- function(hex_idx, hex_geom, raster_stack) {
tryCatch({
# Extract raster values within this hexagon
hex_vals <- extract(raster_stack,
hex_geom,
ID = FALSE,
cells = FALSE,
xy = FALSE)
# Convert to data.table
dt <- data.table(hex_vals)
# Filter valid data
dt <- dt[!is.na(biomass) & !is.na(forest_type) &
forest_type %in% c(1, 2, 3) & biomass > 0]
# Add hexagon ID
if(nrow(dt) > 0) {
dt[, hex_ID := hex_idx]
return(dt)
} else {
return(NULL)
}
}, error = function(e) {
warning(sprintf("Error processing hexagon %d: %s", hex_idx, e$message))
return(NULL)
})
}
# ============================================================================
# OPTION 1: Sequential processing (safer, easier to debug)
# ============================================================================
cat("Processing", nrow(Hex_czechia), "hexagons sequentially...\n")
all_results <- vector("list", nrow(Hex_czechia))
nrow(Hex_czechia)
# ============================================================================
# OPTION 1: Sequential processing (safer, easier to debug)
# ============================================================================
cat("Processing", nrow(Hex_czechia), "hexagons sequentially...\n")
all_results <- vector("list", nrow(Hex_czechia))
for(i in 1:nrow(Hex_czechia)) {
if(i %% 100 == 0) {
cat(sprintf("Processing hexagon %d/%d (%.1f%%)\n",
i, nrow(Hex_czechia), 100*i/nrow(Hex_czechia)))
}
all_results[[i]] <- extract_hex_data(Hex_czechia$hex_ID[i],
Hex_czechia[i, ],
biomass_forest_stack)
}
all_results
Hex_czechia
plot(Hex_czechia)
Hex_czechia
biomass_forest_stack
EEA_forest_type_aligned
plot(EEA_forest_type_aligned)
aligned <- rast('Data/EEA_forest_type_aligned.tif')
aligned
plot(aligned)
cropped <- rast('Data/EEA_forest_type_cropped.tif')
cropped
EEA_forest_type <- rast('Data/FTY_2015_100m_eu_03035_d02_Full/FTY_2015_100m_eu_03035_d02_full.tif')
EEA_forest_type
BG <- st_read('Data/BiogeoRegions2016.shp')
Hex <- st_read('Data/grid_forest.gpkg')
Disturbances <- rast('Data/italy/annual_disturbances_1985_2023_italy.tif')
disturbance_binary <- rast("Data/italy/disturbance_binary_2011_2023.tif")
undisturbed <- rast("Data/italy/undisturbed.tif")
Biomass2010 <- rast('Data/ESACCI-BIOMASS-L4-AGB-MERGED-100m-2010-fv6.0.nc')
# clip Biomass2010 to the spatial extent of raster italy (the extent of disturbance_binary)
# 1) Get Italy extent
italy_extent <- ext(disturbance_binary)
italy_crs <- crs(disturbance_binary)
# 2) Reproject the extent to Biomass2019 CRS
italy_extent_transformed <- project(italy_extent,
from = italy_crs,
to = crs(Biomass2010))
#
# # # # 4) Reproject only the cropped portion to Italy CRS
# # # Biomass2010_final <- project(Biomass2010_cropped, disturbance_binary)
#
# # # # Check result
# # # print(Biomass2010_final)
# # # plot(Biomass2010_final)
#
# # # write Biomass2010_final raster and ignore in git
# writeRaster(Biomass2010_cropped,'Data/BiomassItaly2010.tif',overwrite=TRUE)
Biomass2010_cropped <- rast('Data/BiomassItaly2010.tif')
# write Biomass2010_final raster and ignore in git
# writeRaster(Biomass2020_cropped,'Data/BiomassItaly2020.tif')
Biomass2020_cropped <- rast('Data/BiomassItaly2020.tif')
EEA_forest_type <- rast('Data/FTY_2015_100m_eu_03035_d02_Full/FTY_2015_100m_eu_03035_d02_full.tif')
EEA_forest_type_cropped <- crop(EEA_forest_type, italy_extent)
EEA_forest_type_cropped
plot(EEA_forest_type_cropped)
