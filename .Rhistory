library(sf)
library(raster)
library(tidyverse)
library(tmap)
library(ggplot2)
library("stringr")
library(scales)
library(ggspatial)
library(colorblindcheck)
library(rcartocolor)
library(cols4all)
library(ggpubfigs)
library(tidyverse)
library(jsonlite)
library(terra)
# usare Biogeoregioni
# usare atlas of disturbances di Senf: https://zenodo.org/records/13333034
# Usa Esagoni di Daniele
# usa forest type mask da EEA
# usa biomassa di esa cci per 2010 e 2020 e il loro relativo cambio: https://catalogue.ceda.ac.uk/uuid/95913ffb6467447ca72c4e9d8cf30501/  o ftp: ftp://anon-ftp.ceda.ac.uk/neodc/esacci/biomass/data/agb/maps/v6.0
# Prendi i pixel per cui hai loss dal 2015 al 2020 (salta 2010-15 per evitare problemi di ricresicita) e fai delle distribuzioni di frequenza di agb loss per nnedleleaf e broadleaf per aree geografiche
# open Biogeoregions
BG <- st_read('Data/BiogeoRegions2016.shp')
# open hexagons
Hex <- st_read('Data/grid_forest.gpkg')
Disturbances <- rast('Data/czechia/annual_disturbances_1985_2023_czechia.tif')
undisturbed <- rast("Data/czechia/undisturbed.tif")
Biomass2010 <- rast('Data/ESACCI-BIOMASS-L4-AGB-MERGED-100m-2010-fv6.0.nc')
# clip Biomass2010 to the spatial extent of raster czechia (the extent of disturbance_binary)
# 1) Get czechia extent
czechia_extent <- ext(disturbance_binary)
czechia_crs <- crs(disturbance_binary)
library(sf)
library(raster)
library(tidyverse)
library(tmap)
library(ggplot2)
library("stringr")
library(scales)
library(ggspatial)
library(colorblindcheck)
library(rcartocolor)
library(cols4all)
library(ggpubfigs)
library(tidyverse)
library(jsonlite)
library(terra)
BG <- st_read('Data/BiogeoRegions2016.shp')
Hex <- st_read('Data/grid_forest.gpkg')
Disturbances <- rast('Data/czechia/annual_disturbances_1985_2023_czechia.tif')
disturbance_binary <- rast("Data/czechia/disturbance_binary_2011_2023.tif")
undisturbed <- rast("Data/czechia/undisturbed.tif")
Biomass2010 <- rast('Data/ESACCI-BIOMASS-L4-AGB-MERGED-100m-2010-fv6.0.nc')
# clip Biomass2010 to the spatial extent of raster czechia (the extent of disturbance_binary)
# 1) Get czechia extent
czechia_extent <- ext(disturbance_binary)
czechia_crs <- crs(disturbance_binary)
# 2) Reproject the extent to Biomass2019 CRS
czechia_extent_transformed <- project(czechia_extent,
from = czechia_crs,
to = crs(Biomass2010))
Biomass2010_cropped <- rast('Data/Biomassczechia2010.tif')
EEA_forest_type <- rast('Data/FTY_2015_100m_eu_03035_d02_Full/FTY_2015_100m_eu_03035_d02_full.tif')
EEA_forest_type_cropped <- crop(EEA_forest_type, czechia_extent)
EEA_forest_type_cropped
plot(EEA_forest_type_cropped)
unique(EEA_forest_type_cropped$Class_Name)
# Create a reclassification matrix (2 columns: "is" - "becomes")
rcl_matrix <- matrix(c(
1, NA,    # all non-tree and non-forest areas -> NA
2, 1,     # broadleaved forest -> 1 (Broadleaf)
3, 2,     # coniferous forest -> 2 (Needleleaf)
4, 3      # mixed forest -> 3 (Mixed Forest)
), ncol = 2, byrow = TRUE)
# Apply reclassification
EEA_forest_numeric <- classify(EEA_forest_type_cropped, rcl_matrix)
EEA_forest_numeric
plot(EEA_forest_numeric)
EEA_forest_type_cropped
# Create a reclassification matrix (2 columns: "is" - "becomes")
rcl_matrix <- matrix(c(
"all non-tree and non-forest areas", NA,    # all non-tree and non-forest areas -> NA
"broadleaved forest", 1,     # broadleaved forest -> 1 (Broadleaf)
"coniferous forest", 2,     # coniferous forest -> 2 (Needleleaf)
"mixed forest (only for aggregated 100m layer)", 3      # mixed forest -> 3 (Mixed Forest)
), ncol = 2, byrow = TRUE)
# Apply reclassification
EEA_forest_numeric <- classify(EEA_forest_type_cropped, rcl_matrix)
cats <- cats(EEA_forest_type_cropped)[[1]]
print(cats)
EEA_forest_type
rcl_matrix <- matrix(c(
0, NA,    # all non-tree and non-forest areas -> NA (or use 0 if you want to keep it)
1, 1,     # broadleaved forest -> 1 (Broadleaf)
2, 2,     # coniferous forest -> 2 (Needleleaf)
3, 3,     # mixed forest -> 3 (Mixed Forest)
254, NA,  # unclassifiable -> NA
255, NA   # outside area -> NA
), ncol = 2, byrow = TRUE)
# Reclassify
EEA_forest_numeric <- classify(EEA_forest_type_cropped, rcl_matrix)
EEA_forest_numeric
plot(EEA_forest_numeric)
EEA_forest_type_cropped <- crop(EEA_forest_type, czechia_extent)
rcl_matrix <- matrix(c(
0, NA,    # all non-tree and non-forest areas -> NA (or use 0 if you want to keep it)
1, 1,     # broadleaved forest -> 1 (Broadleaf)
2, 2,     # coniferous forest -> 2 (Needleleaf)
3, 3,     # mixed forest -> 3 (Mixed Forest)
254, NA,  # unclassifiable -> NA
255, NA   # outside area -> NA
), ncol = 2, byrow = TRUE)
# Reclassify
EEA_forest_type_cropped <- classify(EEA_forest_type_cropped, rcl_matrix)
writeRaster(EEA_forest_type_cropped,'Data/EEA_forest_type_croppedczechia.tif')
writeRaster(EEA_forest_type_cropped,'Data/EEA_forest_type_croppedczechia.tif',overwrite=TRUE)
EEA_forest_type_cropped <- rast('Data/EEA_forest_type_croppedczechia.tif')
plot(EEA_forest_type_cropped)
# General histograms for the entire study area
library(terra)
library(sf)
library(ggplot2)
library(dplyr)
# Check your rasters
print(Biomass2010_cropped)
print(disturbance_binary)
print(EEA_forest_type_cropped)
Biomass2010_reprojected <- project(Biomass2010_cropped[[1]],
disturbance_binary,
method = "bilinear")
# If EEA_forest_type is also in different CRS, reproject it
EEA_forest_type_reprojected <- project(EEA_forest_type_cropped,
disturbance_binary,
method = "near")  # Use "near" for categorical data
# Step 2: Resample to match exact grid alignment
# This ensures pixels align perfectly
Biomass2010_aligned <- resample(Biomass2010_reprojected,
disturbance_binary,
method = "bilinear")
EEA_forest_type_aligned <- resample(EEA_forest_type_reprojected,
disturbance_binary,
method = "near")
# Verify they now match
compareGeom(disturbance_binary, Biomass2010_aligned, EEA_forest_type_aligned)
writeRaster(Biomass2010_aligned,'Data/Biomassczechia2010_aligned.tif')
# Step 4: Stack and extract values
biomass_forest_stack <- c(biomass_undisturbed[[1]], EEA_forest_type_aligned)
names(biomass_forest_stack) <- c("biomass", "forest_type")
# Get czechia extent from raster
czechia_extent <- ext(Biomass2010_aligned)
# Convert extent to polygon for clipping
czechia_bbox <- as.polygons(czechia_extent, crs = crs(Biomass2010_aligned))
czechia_bbox_sf <- st_as_sf(czechia_bbox)
# Ensure CRS match
if(st_crs(Hex) != st_crs(czechia_bbox_sf)) {
cat("Reprojecting hexagons to match raster CRS...\n")
Hex <- st_transform(Hex, st_crs(czechia_bbox_sf))
}
# Clip hexagons to czechia extent
cat("Clipping hexagons to czechia extent...\n")
cat("Original number of hexagons:", nrow(Hex), "\n")
Hex_czechia <- st_intersection(Hex, czechia_bbox_sf)
Hex_czechia <- Hex_czechia |> dplyr::filter(forest_count >0)
# Make sure hexagons have an ID
if(!"hex_ID" %in% names(Hex_czechia)) {
Hex_czechia$hex_ID <- 1:nrow(Hex_czechia)
}
library(data.table)
# ============================================================================
# Function to extract data for a single hexagon
# ============================================================================
extract_hex_data <- function(hex_idx, hex_geom, raster_stack) {
tryCatch({
# Extract raster values within this hexagon
hex_vals <- extract(raster_stack,
hex_geom,
ID = FALSE,
cells = FALSE,
xy = FALSE)
# Convert to data.table
dt <- data.table(hex_vals)
# Filter valid data
dt <- dt[!is.na(biomass) & !is.na(forest_type) &
forest_type %in% c(1, 2, 3) & biomass > 0]
# Add hexagon ID
if(nrow(dt) > 0) {
dt[, hex_ID := hex_idx]
return(dt)
} else {
return(NULL)
}
}, error = function(e) {
warning(sprintf("Error processing hexagon %d: %s", hex_idx, e$message))
return(NULL)
})
}
# ============================================================================
# OPTION 1: Sequential processing (safer, easier to debug)
# ============================================================================
cat("Processing", nrow(Hex_czechia), "hexagons sequentially...\n")
all_results <- vector("list", nrow(Hex_czechia))
for(i in 1:nrow(Hex_czechia)) {
if(i %% 100 == 0) {
cat(sprintf("Processing hexagon %d/%d (%.1f%%)\n",
i, nrow(Hex_czechia), 100*i/nrow(Hex_czechia)))
}
all_results[[i]] <- extract_hex_data(Hex_czechia$hex_ID[i],
Hex_czechia[i, ],
biomass_forest_stack)
}
cat("Combining results...\n")
biomass_hex_dt <- rbindlist(all_results[!sapply(all_results, is.null)])
# Add forest type labels
biomass_hex_dt[, forest_type_label := fcase(
forest_type == 1, "Broadleaf",
forest_type == 2, "Needleleaf",
forest_type == 3, "Mixed Forest",
default = NA_character_
)]
cat("Total valid pixels across all hexagons:", nrow(biomass_hex_dt), "\n")
cat("Number of hexagons with data:", length(unique(biomass_hex_dt$hex_id)), "\n")
biomass_hex_dt
all_results
all_results
all_results
biomass_forest_stack
EEA_forest_type_reprojected
plot(EEA_forest_type_reprojected)
EEA_forest_type_aligned
compareGeom(disturbance_binary, Biomass2010_aligned, EEA_forest_type_aligned)
EEA_forest_type_aligned
# Step 3: Now mask biomass by disturbance
biomass_undisturbed <- mask(Biomass2010_aligned,
undisturbed,
maskvalues = c(0, NA))
# Step 4: Stack and extract values
biomass_forest_stack <- c(biomass_undisturbed[[1]], EEA_forest_type_aligned)
names(biomass_forest_stack) <- c("biomass", "forest_type")
# Get czechia extent from raster
czechia_extent <- ext(Biomass2010_aligned)
# Convert extent to polygon for clipping
czechia_bbox <- as.polygons(czechia_extent, crs = crs(Biomass2010_aligned))
czechia_bbox_sf <- st_as_sf(czechia_bbox)
# Ensure CRS match
if(st_crs(Hex) != st_crs(czechia_bbox_sf)) {
cat("Reprojecting hexagons to match raster CRS...\n")
Hex <- st_transform(Hex, st_crs(czechia_bbox_sf))
}
# Clip hexagons to czechia extent
cat("Clipping hexagons to czechia extent...\n")
cat("Original number of hexagons:", nrow(Hex), "\n")
Hex_czechia <- st_intersection(Hex, czechia_bbox_sf)
Hex_czechia <- Hex_czechia |> dplyr::filter(forest_count >0)
# Make sure hexagons have an ID
if(!"hex_ID" %in% names(Hex_czechia)) {
Hex_czechia$hex_ID <- 1:nrow(Hex_czechia)
}
library(data.table)
# ============================================================================
# Function to extract data for a single hexagon
# ============================================================================
extract_hex_data <- function(hex_idx, hex_geom, raster_stack) {
tryCatch({
# Extract raster values within this hexagon
hex_vals <- extract(raster_stack,
hex_geom,
ID = FALSE,
cells = FALSE,
xy = FALSE)
# Convert to data.table
dt <- data.table(hex_vals)
# Filter valid data
dt <- dt[!is.na(biomass) & !is.na(forest_type) &
forest_type %in% c(1, 2, 3) & biomass > 0]
# Add hexagon ID
if(nrow(dt) > 0) {
dt[, hex_ID := hex_idx]
return(dt)
} else {
return(NULL)
}
}, error = function(e) {
warning(sprintf("Error processing hexagon %d: %s", hex_idx, e$message))
return(NULL)
})
}
# ============================================================================
# OPTION 1: Sequential processing (safer, easier to debug)
# ============================================================================
cat("Processing", nrow(Hex_czechia), "hexagons sequentially...\n")
all_results <- vector("list", nrow(Hex_czechia))
for(i in 1:nrow(Hex_czechia)) {
if(i %% 100 == 0) {
cat(sprintf("Processing hexagon %d/%d (%.1f%%)\n",
i, nrow(Hex_czechia), 100*i/nrow(Hex_czechia)))
}
all_results[[i]] <- extract_hex_data(Hex_czechia$hex_ID[i],
Hex_czechia[i, ],
biomass_forest_stack)
}
cat("Combining results...\n")
biomass_hex_dt <- rbindlist(all_results[!sapply(all_results, is.null)])
biomass_hex_dt
# Add forest type labels
biomass_hex_dt[, forest_type_label := fcase(
forest_type == 1, "Broadleaf",
forest_type == 2, "Needleleaf",
forest_type == 3, "Mixed Forest",
default = NA_character_
)]
cat("Total valid pixels across all hexagons:", nrow(biomass_hex_dt), "\n")
cat("Number of hexagons with data:", length(unique(biomass_hex_dt$hex_id)), "\n")
fwrite(biomass_hex_dt, "Data/biomassczechia_by_hexagon_completeUndisturbed.csv")
# 2. Summary statistics by hexagon and forest type
hex_summary <- biomass_hex_dt[, .(
n_pixels = .N,
mean_biomass = mean(biomass),
median_biomass = median(biomass),
sd_biomass = sd(biomass),
min_biomass = min(biomass),
max_biomass = max(biomass)
# total_biomass = sum(biomass)
), by = .(hex_ID, forest_type_label)]
fwrite(hex_summary, "Data/biomassczechia_by_hexagon_summaryUndisturbed.csv")
# 3. Summary by hexagon (all forest types combined)
hex_summary_total <- biomass_hex_dt[, .(
n_pixels = .N,
mean_biomass = mean(biomass),
median_biomass = median(biomass),
# total_biomass = sum(biomass),
n_broadleaf = sum(forest_type == 1),
n_needleleaf = sum(forest_type == 2),
n_mixed = sum(forest_type == 3)
), by = hex_ID]
fwrite(hex_summary_total, "Data/biomassczechia_by_hexagon_totalUndisturbed.csv")
# 4. Merge summary back to spatial hexagons for mapping
Hex_with_biomass <- merge(Hex_czechia, hex_summary_total, by = "hex_ID", all.x = TRUE)
Hex_with_biomass <- Hex_with_biomass |> select(-hex_id)
st_write(Hex_with_biomass, "Data/gridczechia_forest_with_biomassUndisturbed.gpkg", delete_dsn = TRUE)
Hex_with_biomass2 <- merge(Hex_czechia, hex_summary, by = "hex_ID", all.x = TRUE)
Hex_with_biomass2 <- Hex_with_biomass2 |> select(-hex_id)
st_write(Hex_with_biomass2, "Data/gridczechia_forest_with_biomassTypeUndisturbed.gpkg", delete_dsn = TRUE)
plot(Hex_with_biomass2)
Disturbances <- rast('Data/czechia/annual_disturbances_1985_2023_czechia.tif')
# Step 3: Now mask biomass by disturbance
biomass_disturbed <- mask(Biomass2010_aligned,
disturbance_binary,
maskvalues = c(0, NA))
# Step 4: Stack and extract values
biomass_forest_stack <- c(biomass_disturbed[[1]], EEA_forest_type_aligned)
names(biomass_forest_stack) <- c("biomass", "forest_type")
biomass_disturbed
plot(biomass_disturbed)
# Step 4: Stack and extract values
biomass_forest_stack <- c(biomass_disturbed[[1]], EEA_forest_type_aligned)
names(biomass_forest_stack) <- c("biomass", "forest_type")
# Get czechia extent from raster
czechia_extent <- ext(Biomass2010_aligned)
# Convert extent to polygon for clipping
czechia_bbox <- as.polygons(czechia_extent, crs = crs(Biomass2010_aligned))
czechia_bbox_sf <- st_as_sf(czechia_bbox)
# Ensure CRS match
if(st_crs(Hex) != st_crs(czechia_bbox_sf)) {
cat("Reprojecting hexagons to match raster CRS...\n")
Hex <- st_transform(Hex, st_crs(czechia_bbox_sf))
}
# Clip hexagons to czechia extent
cat("Clipping hexagons to czechia extent...\n")
cat("Original number of hexagons:", nrow(Hex), "\n")
Hex_czechia <- st_intersection(Hex, czechia_bbox_sf)
Hex_czechia <- Hex_czechia |> dplyr::filter(forest_count >0)
# Make sure hexagons have an ID
if(!"hex_ID" %in% names(Hex_czechia)) {
Hex_czechia$hex_ID <- 1:nrow(Hex_czechia)
}
library(data.table)
# ============================================================================
# Function to extract data for a single hexagon
# ============================================================================
extract_hex_data <- function(hex_idx, hex_geom, raster_stack) {
tryCatch({
# Extract raster values within this hexagon
hex_vals <- extract(raster_stack,
hex_geom,
ID = FALSE,
cells = FALSE,
xy = FALSE)
# Convert to data.table
dt <- data.table(hex_vals)
# Filter valid data
dt <- dt[!is.na(biomass) & !is.na(forest_type) &
forest_type %in% c(1, 2, 3) & biomass > 0]
# Add hexagon ID
if(nrow(dt) > 0) {
dt[, hex_ID := hex_idx]
return(dt)
} else {
return(NULL)
}
}, error = function(e) {
warning(sprintf("Error processing hexagon %d: %s", hex_idx, e$message))
return(NULL)
})
}
# ============================================================================
# OPTION 1: Sequential processing (safer, easier to debug)
# ============================================================================
cat("Processing", nrow(Hex_czechia), "hexagons sequentially...\n")
all_results <- vector("list", nrow(Hex_czechia))
for(i in 1:nrow(Hex_czechia)) {
if(i %% 100 == 0) {
cat(sprintf("Processing hexagon %d/%d (%.1f%%)\n",
i, nrow(Hex_czechia), 100*i/nrow(Hex_czechia)))
}
all_results[[i]] <- extract_hex_data(Hex_czechia$hex_ID[i],
Hex_czechia[i, ],
biomass_forest_stack)
}
cat("Combining results...\n")
biomass_hex_dt <- rbindlist(all_results[!sapply(all_results, is.null)])
# Add forest type labels
biomass_hex_dt[, forest_type_label := fcase(
forest_type == 1, "Broadleaf",
forest_type == 2, "Needleleaf",
forest_type == 3, "Mixed Forest",
default = NA_character_
)]
cat("Total valid pixels across all hexagons:", nrow(biomass_hex_dt), "\n")
cat("Number of hexagons with data:", length(unique(biomass_hex_dt$hex_id)), "\n")
biomass_hex_dt
fwrite(biomass_hex_dt, "Data/biomassczechia_by_hexagon_completeDisturbed.csv")
library(sf)
library(raster)
library(tidyverse)
library(tmap)
library(ggplot2)
library("stringr")
library(scales)
library(ggspatial)
library(colorblindcheck)
library(rcartocolor)
library(cols4all)
library(ggpubfigs)
library(tidyverse)
library(jsonlite)
library(terra)
library(data.table)
biomass_hex_UND <- read_csv("Data/biomassczechia_by_hexagon_completeUndisturbed.csv")
biomass_hex_DIST <- read_csv("Data/biomassczechia_by_hexagon_completeDisturbed.csv")
setDT(biomass_hex_UND)
setDT(biomass_hex_DIST)
# 2. Summary statistics by hexagon and forest type
hex_summary_UND <- biomass_hex_UND[, .(
n_pixels = .N,
mean_biomass = mean(biomass),
median_biomass = median(biomass),
sd_biomass = sd(biomass),
min_biomass = min(biomass),
max_biomass = max(biomass)
# total_biomass = sum(biomass)
), by = .(hex_ID, forest_type_label)]
hex_summary_UND
hex_summary_DIST <- biomass_hex_DIST[, .(
n_pixels = .N,
mean_biomass = mean(biomass),
median_biomass = median(biomass),
sd_biomass = sd(biomass),
min_biomass = min(biomass),
max_biomass = max(biomass)
# total_biomass = sum(biomass)
), by = .(hex_ID, forest_type_label)]
hex_summary_DIST
# convert to tibbles
hex_summary_UND <- as_tibble(hex_summary_UND)
hex_summary_DIST <- as_tibble(hex_summary_DIST)
# add columns to identify disturbed vs undisturbed
hex_summary_UND <- hex_summary_UND %>%
mutate(disturbance_status = "Undisturbed")
hex_summary_DIST <- hex_summary_DIST %>%
mutate(disturbance_status = "Disturbed")
# combine both summaries
hex_summary <- bind_rows(hex_summary_UND, hex_summary_DIST)
hex_summary
# for each ID and forest type, calculate the ratio of mean biomass disturbed/undisturbed
# also keep the information of number of samples for disturbed and unisturbed to further filter for low number
hex_summary_ratio <- hex_summary %>%
filter(n_pixels >= 30) %>%
select(hex_ID, forest_type_label, mean_biomass, disturbance_status) %>%
pivot_wider(names_from = disturbance_status, values_from = mean_biomass) %>%
mutate(biomass_ratio_DIST_UND = Disturbed / Undisturbed)
# make hex_summary_ratio wider to get forest type in wide format
hex_summary_ratio_wide <- hex_summary_ratio %>%
select(hex_ID, forest_type_label, biomass_ratio_DIST_UND) %>%
pivot_wider(names_from = forest_type_label, values_from = biomass_ratio_DIST_UND, names_prefix = "ratio_")
# make hex_summary_ratio wider to get forest type in wide format
hex_summary_Undisturbed_wide <- hex_summary_ratio %>%
select(hex_ID, forest_type_label, Undisturbed) %>%
pivot_wider(names_from = forest_type_label, values_from = Undisturbed, names_prefix = "UND_")
hex_summary_Disturbed_wide <- hex_summary_ratio %>%
select(hex_ID, forest_type_label, Disturbed) %>%
pivot_wider(names_from = forest_type_label, values_from = Disturbed, names_prefix = "DIST_")
# open hexagons
Hex_italy <- st_read('Data/Hexs/Hex_czechia.gpkg')
# join hex_summary_ratio with Hex_italy
Hex_italy_biomass_ratio <- Hex_italy %>% ###st_drop_geometry() %>%
left_join(hex_summary_ratio_wide, by = c("hex_ID")) %>%
left_join(hex_summary_Undisturbed_wide, by = c("hex_ID"))%>%
left_join(hex_summary_Disturbed_wide, by = c("hex_ID"))
# write Hex_italy_biomass_ratio to gpkg
st_write(Hex_italy_biomass_ratio, "Data/Hexs/Hex_czechia_biomass_ratioUndisturbed.gpkg", delete_dsn = TRUE)
# fwrite(hex_summary, "Data/biomass_by_hexagon_summaryUndisturbed.csv")
plot(Hex_italy_biomass_ratio)
